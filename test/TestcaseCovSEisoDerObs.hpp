#ifndef _TEST_CASE_COVARIANCE_FUNCTION_SQUARED_EXPONENTIAL_ISO_WIDE_DERIVATIVE_OBSERVATIONS_HPP_
#define _TEST_CASE_COVARIANCE_FUNCTION_SQUARED_EXPONENTIAL_ISO_WIDE_DERIVATIVE_OBSERVATIONS_HPP_

#include "TestDataSetting.hpp"
#include <fstream>

/**
 * @class	TestCaseCovSEisoDerObs
 * @brief	Test fixture for testing CovSEisoDerObs class.
 * @note		Inherits from TestDataSetting
 * 			to use the initialized training data and test positions.
 * @author	Soohwan Kim
 * @date		30/06/2014
 */
class TestCaseCovSEisoDerObs : public TestDataSetting
{
protected:
	/** @brief	Overloading the test fixture set up. */
	virtual void SetUp()
	{
		// Call the parent set up.
		TestDataSetting::SetUp();

		// Set the hyperparameters.
		logHyp(0) = log(ell);
		logHyp(1) = log(sigma_f);
	}

protected:
	/** @brief Log hyperparameters: log([ell, sigma_f]). */
	//typename CovSEIsoDerObsf::Hyp logHyp;
	CovSEisoDerObs<float>::Hyp logHyp;
};

/** @brief	K: (NxN) self covariance matrix between the training data. */  
TEST_F(TestCaseCovSEisoDerObs, KTest)
{
	// Expected value
	MatrixXf K1(17, 17);
	K1 <<  2.250000000000000f,  1.195783421516941f,  1.034129206871412f,  0.606826401078133f,  0.606826401078133f, -0.104548290924953f,  0.428429993295581f,  1.699143903092521f,  0.428429993295581f, -1.407586406947708f, -1.092463846446376f, -0.930801974649044f, -1.092463846446376f, -0.676479691350783f, -1.168521800418196f,  0.327046076845187f, -1.168521800418196f, 
		    1.195783421516941f,  2.250000000000000f,  0.894345544003630f,  1.063522576822939f,  1.063522576822939f, -0.760258969068444f, -0.842021163925068f,  0.972372594297029f, -0.842021163925068f, -1.133293798190432f, -1.949498075551553f, -1.526726945908446f, -1.949498075551553f, -0.125405658135495f, -1.114615712145144f,  1.871934496638610f, -1.114615712145144f, 
			 1.034129206871412f,  0.894345544003630f,  2.250000000000000f,  1.393708529409504f,  1.393708529409504f, -1.407764149038552f, -0.097539590830289f,  2.475858805357964f, -0.097539590830289f, -1.115709054491484f, -0.066319646498920f,  1.022844282522428f, -0.066319646498920f, -1.934746488238650f, -2.458383901953420f,  0.516419602158870f, -2.458383901953420f, 
			 0.606826401078133f,  1.063522576822939f,  1.393708529409504f,  2.250000000000000f,  2.250000000000000f, -0.845040249294214f, -0.788887258321572f,  0.000000000000000f, -0.788887258321572f, -0.482558801591683f, -0.337760408273778f,  0.000000000000000f, -0.337760408273778f, -0.586289086888887f, -1.274706305201622f,  0.000000000000000f, -1.274706305201622f, 
			 0.606826401078133f,  1.063522576822939f,  1.393708529409504f,  2.250000000000000f,  2.250000000000000f, -0.845040249294214f, -0.788887258321572f,  0.000000000000000f, -0.788887258321572f, -0.482558801591683f, -0.337760408273778f,  0.000000000000000f, -0.337760408273778f, -0.586289086888887f, -1.274706305201622f,  0.000000000000000f, -1.274706305201622f, 
			-0.104548290924953f, -0.760258969068444f, -1.407764149038552f, -0.845040249294214f, -0.845040249294214f,  9.000000000000000f,  4.061289316760231f, -1.460716658450740f,  4.061289316760231f,  0.000000000000000f, -1.655482737905971f, -1.468449587415477f, -1.655482737905971f,  0.000000000000000f,  1.653098957180035f, -1.784105822769061f,  1.653098957180035f, 
			 0.428429993295581f, -0.842021163925068f, -0.097539590830289f, -0.788887258321572f, -0.788887258321572f,  4.061289316760231f,  9.000000000000000f,  0.191282698827731f,  9.000000000000000f, -1.655482737905971f,  0.000000000000000f, -0.635812147340349f,  0.000000000000000f,  1.653098957180035f,  0.000000000000000f, -2.399552266296351f,  0.000000000000000f, 
			 1.699143903092521f,  0.972372594297029f,  2.475858805357964f,  0.000000000000000f,  0.000000000000000f, -1.460716658450740f,  0.191282698827731f,  9.000000000000000f,  0.191282698827731f, -1.468449587415477f, -0.635812147340349f,  0.000000000000000f, -0.635812147340349f, -1.784105822769061f, -2.399552266296351f,  0.000000000000000f, -2.399552266296351f, 
			 0.428429993295581f, -0.842021163925068f, -0.097539590830289f, -0.788887258321572f, -0.788887258321572f,  4.061289316760231f,  9.000000000000000f,  0.191282698827731f,  9.000000000000000f, -1.655482737905971f,  0.000000000000000f, -0.635812147340349f,  0.000000000000000f,  1.653098957180035f,  0.000000000000000f, -2.399552266296351f,  0.000000000000000f, 
			-1.407586406947708f, -1.133293798190432f, -1.115709054491484f, -0.482558801591683f, -0.482558801591683f,  0.000000000000000f, -1.655482737905971f, -1.468449587415477f, -1.655482737905971f,  9.000000000000000f,  4.794305892972652f,  0.272225719801279f,  4.794305892972652f,  0.000000000000000f,  1.327146128002539f, -1.018810605136554f,  1.327146128002539f, 
			-1.092463846446376f, -1.949498075551553f, -0.066319646498920f, -0.337760408273778f, -0.337760408273778f, -1.655482737905971f,  0.000000000000000f, -0.635812147340349f,  0.000000000000000f,  4.794305892972652f,  9.000000000000000f,  1.404090372214034f,  9.000000000000000f,  1.327146128002539f,  0.000000000000000f, -1.027363219001509f,  0.000000000000000f, 
			-0.930801974649044f, -1.526726945908446f,  1.022844282522428f,  0.000000000000000f,  0.000000000000000f, -1.468449587415477f, -0.635812147340349f,  0.000000000000000f, -0.635812147340349f,  0.272225719801279f,  1.404090372214034f,  9.000000000000000f,  1.404090372214034f, -1.018810605136554f, -1.027363219001509f,  0.000000000000000f, -1.027363219001509f, 
			-1.092463846446376f, -1.949498075551553f, -0.066319646498920f, -0.337760408273778f, -0.337760408273778f, -1.655482737905971f,  0.000000000000000f, -0.635812147340349f,  0.000000000000000f,  4.794305892972652f,  9.000000000000000f,  1.404090372214034f,  9.000000000000000f,  1.327146128002539f,  0.000000000000000f, -1.027363219001509f,  0.000000000000000f, 
			-0.676479691350783f, -0.125405658135495f, -1.934746488238650f, -0.586289086888887f, -0.586289086888887f,  0.000000000000000f,  1.653098957180035f, -1.784105822769061f,  1.653098957180035f,  0.000000000000000f,  1.327146128002539f, -1.018810605136554f,  1.327146128002539f,  9.000000000000000f,  4.798130646047195f, -0.127031594776571f,  4.798130646047195f, 
			-1.168521800418196f, -1.114615712145144f, -2.458383901953420f, -1.274706305201622f, -1.274706305201622f,  1.653098957180035f,  0.000000000000000f, -2.399552266296351f,  0.000000000000000f,  1.327146128002539f,  0.000000000000000f, -1.027363219001509f,  0.000000000000000f,  4.798130646047195f,  9.000000000000000f, -2.200952304084860f,  9.000000000000000f, 
			 0.327046076845187f,  1.871934496638610f,  0.516419602158870f,  0.000000000000000f,  0.000000000000000f, -1.784105822769061f, -2.399552266296351f,  0.000000000000000f, -2.399552266296351f, -1.018810605136554f, -1.027363219001509f,  0.000000000000000f, -1.027363219001509f, -0.127031594776571f, -2.200952304084860f,  9.000000000000000f, -2.200952304084860f, 
			-1.168521800418196f, -1.114615712145144f, -2.458383901953420f, -1.274706305201622f, -1.274706305201622f,  1.653098957180035f,  0.000000000000000f, -2.399552266296351f,  0.000000000000000f,  1.327146128002539f,  0.000000000000000f, -1.027363219001509f,  0.000000000000000f,  4.798130646047195f,  9.000000000000000f, -2.200952304084860f,  9.000000000000000f;

	// Actual value
	MatrixXfPtr pK2 = CovSEisoDerObs<float>::K(logHyp, derivativeTrainingData);

	// Test
	EXPECT_TRUE(K1.isApprox(*pK2))
		<< "Expected: " << endl << K1 << endl << endl 
		<< "Actual: " << endl << *pK2 << endl << endl;
}

/** @brief	pd[K]/pd[log(ell)]: (NxN) partial derivative of K with respect to log(ell). */  
TEST_F(TestCaseCovSEisoDerObs, dKdlogellTest)
{
	// Expected value
	MatrixXf K1(17, 17);
	K1 <<  0.000000000000000f,  1.511777950421784f,  1.607803055808120f,  1.590422503432665f,  1.590422503432665f, -0.136819572858730f,  0.490620635702894f,  1.054973777766396f,  0.490620635702894f, -1.842070963155020f, -1.251045247096330f, -0.577921430763274f, -1.251045247096330f, -0.885291013362025f, -1.338143728322809f,  0.203058160385995f, -1.338143728322809f, 
		    1.511777950421784f,  0.000000000000000f,  1.650234378072228f,  1.593887740837630f,  1.593887740837630f, -1.278091225458310f,  0.083355149460816f, -0.487462765679829f,  0.083355149460816f, -1.905209827525377f,  0.192988858740412f,  0.765367662411835f,  0.192988858740412f, -0.210822729894517f,  0.110340408599872f, -0.938424604163818f,  0.110340408599872f, 
			 1.607803055808120f,  1.650234378072228f,  0.000000000000000f,  1.335066891462005f,  1.335066891462005f,  0.829851523433553f,  0.020690614113166f, -2.580032965599663f,  0.020690614113166f,  0.657690323489699f,  0.014068074329102f, -1.065881447630231f,  0.014068074329102f,  1.140498088276427f,  0.521485401203287f, -0.538148457726413f,  0.521485401203287f, 
			 1.590422503432665f,  1.593887740837630f,  1.335066891462005f,  0.000000000000000f,  0.000000000000000f, -1.845839796972857f, -1.073878203910549f,  -0.000000000000000f, -1.073878203910549f, -1.054063686435530f, -0.459778677831410f,  -0.000000000000000f, -0.459778677831410f, -1.280644004843847f, -1.735202721432949f,  -0.000000000000000f, -1.735202721432949f, 
			 1.590422503432665f,  1.593887740837630f,  1.335066891462005f,  0.000000000000000f,  0.000000000000000f, -1.845839796972857f, -1.073878203910549f,  -0.000000000000000f, -1.073878203910549f, -1.054063686435530f, -0.459778677831410f,  -0.000000000000000f, -0.459778677831410f, -1.280644004843847f, -1.735202721432949f,  -0.000000000000000f, -1.735202721432949f, 
			-0.136819572858730f, -1.278091225458310f,  0.829851523433553f, -1.845839796972857f, -1.845839796972857f, -18.000000000000000f, -0.870317782110254f,  1.952320881723154f, -0.870317782110254f,  0.000000000000000f,  5.346836201280334f, -0.270667199153855f,  5.346836201280334f,  0.000000000000000f, -5.339137126690483f, -0.328849509156732f, -5.339137126690483f, 
			 0.490620635702894f,  0.083355149460816f,  0.020690614113166f, -1.073878203910549f, -1.073878203910549f, -0.870317782110254f, -18.000000000000000f,  3.230443483240851f, -18.000000000000000f,  5.346836201280334f,  0.000000000000000f,  0.406120637969283f,  0.000000000000000f, -5.339137126690483f,  0.000000000000000f,  1.532697513417059f,  0.000000000000000f, 
			 1.054973777766396f, -0.487462765679829f, -2.580032965599663f,  -0.000000000000000f,  -0.000000000000000f,  1.952320881723154f,  3.230443483240851f, -18.000000000000000f,  3.230443483240851f, -0.270667199153855f,  0.406120637969283f,  0.000000000000000f,  0.406120637969283f, -0.328849509156732f,  1.532697513417059f,  0.000000000000000f,  1.532697513417059f, 
			 0.490620635702894f,  0.083355149460816f,  0.020690614113166f, -1.073878203910549f, -1.073878203910549f, -0.870317782110254f, -18.000000000000000f,  3.230443483240851f, -18.000000000000000f,  5.346836201280334f,  0.000000000000000f,  0.406120637969283f,  0.000000000000000f, -5.339137126690483f,  0.000000000000000f,  1.532697513417059f,  0.000000000000000f, 
			-1.842070963155020f, -1.905209827525377f,  0.657690323489699f, -1.054063686435530f, -1.054063686435530f,  0.000000000000000f,  5.346836201280334f, -0.270667199153855f,  5.346836201280334f, -18.000000000000000f, -3.237796147235768f,  2.271739855201187f, -3.237796147235768f,  0.000000000000000f, -4.286382937806295f, -0.187788954638817f, -4.286382937806295f, 
			-1.251045247096330f,  0.192988858740412f,  0.014068074329102f, -0.459778677831410f, -0.459778677831410f,  5.346836201280334f,  0.000000000000000f,  0.406120637969283f,  0.000000000000000f, -3.237796147235768f, -18.000000000000000f,  2.455770919795743f, -18.000000000000000f, -4.286382937806295f,  0.000000000000000f,  0.656221193118736f,  0.000000000000000f, 
			-0.577921430763274f,  0.765367662411835f, -1.065881447630231f,  -0.000000000000000f,  -0.000000000000000f, -0.270667199153855f,  0.406120637969283f,  0.000000000000000f,  0.406120637969283f,  2.271739855201187f,  2.455770919795743f, -18.000000000000000f,  2.455770919795743f, -0.187788954638817f,  0.656221193118736f,  0.000000000000000f,  0.656221193118736f, 
			-1.251045247096330f,  0.192988858740412f,  0.014068074329102f, -0.459778677831410f, -0.459778677831410f,  5.346836201280334f,  0.000000000000000f,  0.406120637969283f,  0.000000000000000f, -3.237796147235768f, -18.000000000000000f,  2.455770919795743f, -18.000000000000000f, -4.286382937806295f,  0.000000000000000f,  0.656221193118736f,  0.000000000000000f, 
			-0.885291013362025f, -0.210822729894517f,  1.140498088276427f, -1.280644004843847f, -1.280644004843847f,  0.000000000000000f, -5.339137126690483f, -0.328849509156732f, -5.339137126690483f,  0.000000000000000f, -4.286382937806295f, -0.187788954638817f, -4.286382937806295f, -18.000000000000000f, -3.250149237806673f,  2.198148047893267f, -3.250149237806673f, 
			-1.338143728322809f,  0.110340408599872f,  0.521485401203287f, -1.735202721432949f, -1.735202721432949f, -5.339137126690483f,  0.000000000000000f,  1.532697513417059f,  0.000000000000000f, -4.286382937806295f,  0.000000000000000f,  0.656221193118736f,  0.000000000000000f, -3.250149237806673f, -18.000000000000000f,  4.758467144976980f, -18.000000000000000f, 
			 0.203058160385995f, -0.938424604163818f, -0.538148457726413f,  -0.000000000000000f,  -0.000000000000000f, -0.328849509156732f,  1.532697513417059f,  0.000000000000000f,  1.532697513417059f, -0.187788954638817f,  0.656221193118736f,  0.000000000000000f,  0.656221193118736f,  2.198148047893267f,  4.758467144976980f, -18.000000000000000f,  4.758467144976980f, 
			-1.338143728322809f,  0.110340408599872f,  0.521485401203287f, -1.735202721432949f, -1.735202721432949f, -5.339137126690483f,  0.000000000000000f,  1.532697513417059f,  0.000000000000000f, -4.286382937806295f,  0.000000000000000f,  0.656221193118736f,  0.000000000000000f, -3.250149237806673f, -18.000000000000000f,  4.758467144976980f, -18.000000000000000f;

	// Actual value
	MatrixXfPtr pK2 = CovSEisoDerObs<float>::K(logHyp, derivativeTrainingData, 0);

	// Test
	EXPECT_TRUE(K1.isApprox(*pK2))
		<< "Expected: " << endl << K1 << endl << endl 
		<< "Actual: " << endl << *pK2 << endl << endl;
}

/** @brief	pd[K]/pd[log(sigma_f)]: (NxN) partial derivative of K with respect to log(sigma_f). */  
TEST_F(TestCaseCovSEisoDerObs, dKdlogsigmafTest)
{
	// Expected value
	MatrixXf K1(17, 17);
	K1 <<  4.500000000000000f,  2.391566843033882f,  2.068258413742825f,  1.213652802156266f,  1.213652802156266f, -0.209096581849906f,  0.856859986591163f,  3.398287806185042f,  0.856859986591163f, -2.815172813895416f, -2.184927692892753f, -1.861603949298088f, -2.184927692892753f, -1.352959382701566f, -2.337043600836392f,  0.654092153690374f, -2.337043600836392f, 
		    2.391566843033882f,  4.500000000000000f,  1.788691088007260f,  2.127045153645877f,  2.127045153645877f, -1.520517938136889f, -1.684042327850136f,  1.944745188594059f, -1.684042327850136f, -2.266587596380865f, -3.898996151103107f, -3.053453891816892f, -3.898996151103107f, -0.250811316270990f, -2.229231424290288f,  3.743868993277220f, -2.229231424290288f, 
			 2.068258413742825f,  1.788691088007260f,  4.500000000000000f,  2.787417058819007f,  2.787417058819007f, -2.815528298077105f, -0.195079181660578f,  4.951717610715929f, -0.195079181660578f, -2.231418108982969f, -0.132639292997839f,  2.045688565044857f, -0.132639292997839f, -3.869492976477300f, -4.916767803906841f,  1.032839204317740f, -4.916767803906841f, 
			 1.213652802156266f,  2.127045153645877f,  2.787417058819007f,  4.500000000000000f,  4.500000000000000f, -1.690080498588427f, -1.577774516643144f,  0.000000000000000f, -1.577774516643144f, -0.965117603183367f, -0.675520816547556f,  0.000000000000000f, -0.675520816547556f, -1.172578173777774f, -2.549412610403244f,  0.000000000000000f, -2.549412610403244f, 
			 1.213652802156266f,  2.127045153645877f,  2.787417058819007f,  4.500000000000000f,  4.500000000000000f, -1.690080498588427f, -1.577774516643144f,  0.000000000000000f, -1.577774516643144f, -0.965117603183367f, -0.675520816547556f,  0.000000000000000f, -0.675520816547556f, -1.172578173777774f, -2.549412610403244f,  0.000000000000000f, -2.549412610403244f, 
			-0.209096581849906f, -1.520517938136889f, -2.815528298077105f, -1.690080498588427f, -1.690080498588427f,  18.000000000000000f,  8.122578633520462f, -2.921433316901480f,  8.122578633520462f,  0.000000000000000f, -3.310965475811941f, -2.936899174830953f, -3.310965475811941f,  0.000000000000000f,  3.306197914360069f, -3.568211645538123f,  3.306197914360069f, 
			 0.856859986591163f, -1.684042327850136f, -0.195079181660578f, -1.577774516643144f, -1.577774516643144f,  8.122578633520462f,  18.000000000000000f,  0.382565397655461f,  18.000000000000000f, -3.310965475811941f,  0.000000000000000f, -1.271624294680698f,  0.000000000000000f,  3.306197914360069f,  0.000000000000000f, -4.799104532592702f,  0.000000000000000f, 
			 3.398287806185042f,  1.944745188594059f,  4.951717610715929f,  0.000000000000000f,  0.000000000000000f, -2.921433316901480f,  0.382565397655461f,  18.000000000000000f,  0.382565397655461f, -2.936899174830953f, -1.271624294680698f,  0.000000000000000f, -1.271624294680698f, -3.568211645538123f, -4.799104532592702f,  0.000000000000000f, -4.799104532592702f, 
			 0.856859986591163f, -1.684042327850136f, -0.195079181660578f, -1.577774516643144f, -1.577774516643144f,  8.122578633520462f,  18.000000000000000f,  0.382565397655461f,  18.000000000000000f, -3.310965475811941f,  0.000000000000000f, -1.271624294680698f,  0.000000000000000f,  3.306197914360069f,  0.000000000000000f, -4.799104532592702f,  0.000000000000000f, 
			-2.815172813895416f, -2.266587596380865f, -2.231418108982969f, -0.965117603183367f, -0.965117603183367f,  0.000000000000000f, -3.310965475811941f, -2.936899174830953f, -3.310965475811941f,  18.000000000000000f,  9.588611785945304f,  0.544451439602559f,  9.588611785945304f,  0.000000000000000f,  2.654292256005079f, -2.037621210273108f,  2.654292256005079f, 
			-2.184927692892753f, -3.898996151103107f, -0.132639292997839f, -0.675520816547556f, -0.675520816547556f, -3.310965475811941f,  0.000000000000000f, -1.271624294680698f,  0.000000000000000f,  9.588611785945304f,  18.000000000000000f,  2.808180744428068f,  18.000000000000000f,  2.654292256005079f,  0.000000000000000f, -2.054726438003018f,  0.000000000000000f, 
			-1.861603949298088f, -3.053453891816892f,  2.045688565044857f,  0.000000000000000f,  0.000000000000000f, -2.936899174830953f, -1.271624294680698f,  0.000000000000000f, -1.271624294680698f,  0.544451439602559f,  2.808180744428068f,  18.000000000000000f,  2.808180744428068f, -2.037621210273108f, -2.054726438003018f,  0.000000000000000f, -2.054726438003018f, 
			-2.184927692892753f, -3.898996151103107f, -0.132639292997839f, -0.675520816547556f, -0.675520816547556f, -3.310965475811941f,  0.000000000000000f, -1.271624294680698f,  0.000000000000000f,  9.588611785945304f,  18.000000000000000f,  2.808180744428068f,  18.000000000000000f,  2.654292256005079f,  0.000000000000000f, -2.054726438003018f,  0.000000000000000f, 
			-1.352959382701566f, -0.250811316270990f, -3.869492976477300f, -1.172578173777774f, -1.172578173777774f,  0.000000000000000f,  3.306197914360069f, -3.568211645538123f,  3.306197914360069f,  0.000000000000000f,  2.654292256005079f, -2.037621210273108f,  2.654292256005079f,  18.000000000000000f,  9.596261292094390f, -0.254063189553142f,  9.596261292094390f, 
			-2.337043600836392f, -2.229231424290288f, -4.916767803906841f, -2.549412610403244f, -2.549412610403244f,  3.306197914360069f,  0.000000000000000f, -4.799104532592702f,  0.000000000000000f,  2.654292256005079f,  0.000000000000000f, -2.054726438003018f,  0.000000000000000f,  9.596261292094390f,  18.000000000000000f, -4.401904608169719f,  18.000000000000000f, 
			 0.654092153690374f,  3.743868993277220f,  1.032839204317740f,  0.000000000000000f,  0.000000000000000f, -3.568211645538123f, -4.799104532592702f,  0.000000000000000f, -4.799104532592702f, -2.037621210273108f, -2.054726438003018f,  0.000000000000000f, -2.054726438003018f, -0.254063189553142f, -4.401904608169719f,  18.000000000000000f, -4.401904608169719f, 
			-2.337043600836392f, -2.229231424290288f, -4.916767803906841f, -2.549412610403244f, -2.549412610403244f,  3.306197914360069f,  0.000000000000000f, -4.799104532592702f,  0.000000000000000f,  2.654292256005079f,  0.000000000000000f, -2.054726438003018f,  0.000000000000000f,  9.596261292094390f,  18.000000000000000f, -4.401904608169719f,  18.000000000000000f;

	// Actual value
	MatrixXfPtr pK2 = CovSEisoDerObs<float>::K(logHyp, derivativeTrainingData, 1);

	// Test
	EXPECT_TRUE(K1.isApprox(*pK2))
		<< "Expected: " << endl << K1 << endl << endl 
		<< "Actual: " << endl << *pK2 << endl << endl;
}

/** @brief	Ks: (NxM) cross covariance matrix between the training data and test data. */  
TEST_F(TestCaseCovSEisoDerObs, KsTest)
{
	// Expected value
	MatrixXf Ks1(17, 3);
	Ks1 <<  0.442420538101783f,  0.606826401078133f,  0.466895653792557f, 
		     0.171990951493561f,  1.063522576822939f,  0.869729773610560f, 
			  1.400962283095986f,  1.393708529409504f,  0.920344577630508f, 
			  0.395427022709171f,  2.250000000000000f,  0.419077999008476f, 
			  0.395427022709171f,  2.250000000000000f,  0.419077999008476f, 
			  0.128178122938586f, -0.845040249294214f, -1.776713849546351f, 
			  0.522707390579339f, -0.788887258321572f,  0.000000000000000f, 
			  1.248067688471623f,  0.000000000000000f,  0.788887258321572f, 
			  0.522707390579339f, -0.788887258321572f,  0.000000000000000f, 
			  0.268586030025542f, -0.482558801591683f, -1.426387026470749f, 
			  0.479686657702614f, -0.337760408273778f,  0.000000000000000f, 
			  0.780944006784959f,  0.000000000000000f,  0.337760408273778f, 
			  0.479686657702614f, -0.337760408273778f,  0.000000000000000f, 
			 -2.637132523088076f, -0.586289086888887f,  1.424333127735612f, 
			 -1.337526282181474f, -1.274706305201622f,  0.000000000000000f, 
			 -0.086126807619828f,  0.000000000000000f,  1.274706305201622f, 
			 -1.337526282181474f, -1.274706305201622f,  0.000000000000000f;

	// Actual value
	MatrixXfPtr pKs2 = CovSEisoDerObs<float>::Ks(logHyp, derivativeTrainingData, testData);

	// Test
	EXPECT_TRUE(Ks1.isApprox(*pKs2))
		<< "Expected: " << endl << Ks1 << endl << endl 
		<< "Actual: " << endl << *pKs2 << endl << endl;
}

/** @brief	Kss: (Nx1) self variance matrix between the test data. */  
TEST_F(TestCaseCovSEisoDerObs, KssTest)
{
	// Expected value
	MatrixXf Kss1(3, 1);
	Kss1 << 2.250000000000000f, 
		     2.250000000000000f, 
			  2.250000000000000f;

	// Actual value
	MatrixXfPtr pKss2 = CovSEisoDerObs<float>::Kss(logHyp, testData);

	// Test
	EXPECT_TRUE(Kss1.isApprox(*pKss2))
		<< "Expected: " << endl << Kss1 << endl << endl 
		<< "Actual: " << endl << *pKss2 << endl << endl;
}
#endif
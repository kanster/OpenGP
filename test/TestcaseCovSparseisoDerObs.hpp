#ifndef _TEST_CASE_COVARIANCE_FUNCTION_SPARSE_ISO_WIDE_DERIVATIVE_OBSERVATIONS_HPP_
#define _TEST_CASE_COVARIANCE_FUNCTION_SPARSE_ISO_WIDE_DERIVATIVE_OBSERVATIONS_HPP_

#include "TestDerivativeDataSetting.hpp"
#include <fstream>

/**
 * @class	TestCaseCovSparseisoDerObs
 * @brief	Test fixture for testing CovSparseisoDerObs class.
 * @note		Inherits from TestDataSetting
 * 			to use the initialized training data and test positions.
 * @author	Soohwan Kim
 * @date		25/08/2014
 */
class TestCaseCovSparseisoDerObs : public TestDerivativeDataSetting
{
protected:
	/** @brief	Overloading the test fixture set up. */
	virtual void SetUp()
	{
		// Call the parent set up.
		TestDerivativeDataSetting::SetUp();

		// Set the hyperparameters.
		logHyp(0) = log(ell);
		logHyp(1) = log(sigma_f);
	}

protected:
	/** @brief Log hyperparameters: log([ell, sigma_f]). */
	CovSparseisoDerObs<TestType>::Hyp logHyp;
};

/** @brief	K: (NxN) self covariance matrix between the training data. */  
TEST_F(TestCaseCovSparseisoDerObs, KTest)
{
	// Expected value
	Matrix K1(17, 17);
	K1 <<  2.250000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  2.250000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  2.250000000000000f,  0.000000084623653f,  0.000000084623653f,  0.000000000000000f,  0.000000000000000f,  0.000036104069723f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000014915568372f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000007530659375f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000084623653f,  2.250000000000000f,  2.250000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000084623653f,  2.250000000000000f,  2.250000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  118.435252813072280f, -1.122658039912613f,  0.000000000000000f, -1.122658039912613f,  0.000000000000000f, -0.978130939088089f,  0.000000000000000f, -0.978130939088089f,  0.000000000000000f,  0.976722498138117f,  0.000000000000000f,  0.976722498138117f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -1.122658039912613f,  118.435252813072280f,  0.000000000000000f,  118.435252813072280f, -0.978130939088089f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.976722498138117f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000036104069723f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  118.435252813072280f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -1.122658039912613f,  118.435252813072280f,  0.000000000000000f,  118.435252813072280f, -0.978130939088089f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.976722498138117f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -0.978130939088089f,  0.000000000000000f, -0.978130939088089f,  118.435252813072280f, -0.689560082657734f,  0.000000000000000f, -0.689560082657734f,  0.000000000000000f,  0.784135442047706f,  0.000000000000000f,  0.784135442047706f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -0.978130939088089f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -0.689560082657734f,  118.435252813072280f,  0.000000000000000f,  118.435252813072280f,  0.784135442047706f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000014915568372f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  118.435252813072280f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -0.978130939088089f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -0.689560082657734f,  118.435252813072280f,  0.000000000000000f,  118.435252813072280f,  0.784135442047706f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.976722498138117f,  0.000000000000000f,  0.976722498138117f,  0.000000000000000f,  0.784135442047706f,  0.000000000000000f,  0.784135442047706f,  118.435252813072280f, -0.687300252802115f,  0.000000000000000f, -0.687300252802115f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.976722498138117f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.784135442047706f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -0.687300252802115f,  118.435252813072280f,  0.000000000000000f,  118.435252813072280f,
			 0.000000000000000f,  0.000000000000000f,  0.000007530659375f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  118.435252813072280f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.976722498138117f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.784135442047706f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -0.687300252802115f,  118.435252813072280f,  0.000000000000000f,  118.435252813072280f;

	// Actual value
	MatrixPtr pK2 = CovSparseisoDerObs<TestType>::K(logHyp, derivativeTrainingData);

	// Test
	TEST_MACRO::COMPARE(K1, *pK2, __FILE__, __LINE__);
}

/** @brief	pd[K]/pd[log(ell)]: (NxN) partial derivative of K with respect to log(ell). */  
TEST_F(TestCaseCovSparseisoDerObs, dKdlogellTest)
{
	// Expected value
	Matrix K1(17, 17);
	K1 <<  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000019468536748f,  0.000019468536748f,  0.000000000000000f,  0.000000000000000f,  0.006607088473577f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.002729567071714f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.001378119783555f,  0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  0.000019468536748f,  -0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  0.000019468536748f,  -0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -236.870505626144560f, -20.483984096064265f,  0.000000000000000f, -20.483984096064265f,  -0.000000000000000f, -18.528523138024930f,  0.000000000000000f, -18.528523138024930f,  -0.000000000000000f,  18.501843345282207f,  0.000000000000000f,  18.501843345282207f,
			  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -20.483984096064265f, -236.870505626144560f,  0.000000000000000f, -236.870505626144560f, -18.528523138024930f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  18.501843345282207f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  0.006607088473577f,  -0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -236.870505626144560f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -20.483984096064265f, -236.870505626144560f,  0.000000000000000f, -236.870505626144560f, -18.528523138024930f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  18.501843345282207f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f, -18.528523138024930f,  0.000000000000000f, -18.528523138024930f, -236.870505626144560f, -12.279903025374734f,  0.000000000000000f, -12.279903025374734f,  -0.000000000000000f,  14.853708333642516f,  0.000000000000000f,  14.853708333642516f,
			  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -18.528523138024930f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f, -12.279903025374734f, -236.870505626144560f,  0.000000000000000f, -236.870505626144560f,  14.853708333642516f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  0.002729567071714f,  -0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -236.870505626144560f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -18.528523138024930f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f, -12.279903025374734f, -236.870505626144560f,  0.000000000000000f, -236.870505626144560f,  14.853708333642516f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  18.501843345282207f,  0.000000000000000f,  18.501843345282207f,  -0.000000000000000f,  14.853708333642516f,  0.000000000000000f,  14.853708333642516f, -236.870505626144560f, -12.237095556461751f,  0.000000000000000f, -12.237095556461751f,
			  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  18.501843345282207f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  14.853708333642516f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f, -12.237095556461751f, -236.870505626144560f,  0.000000000000000f, -236.870505626144560f,
			  0.000000000000000f,  0.000000000000000f,  0.001378119783555f,  -0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -236.870505626144560f,  0.000000000000000f,
			  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  18.501843345282207f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f,  14.853708333642516f,  -0.000000000000000f,  0.000000000000000f,  -0.000000000000000f, -12.237095556461751f, -236.870505626144560f,  0.000000000000000f, -236.870505626144560f;

	// Actual value
	MatrixPtr pK2 = CovSparseisoDerObs<TestType>::K(logHyp, derivativeTrainingData, 0);

	// Test
	TEST_MACRO::COMPARE(K1, *pK2, __FILE__, __LINE__);
}

/** @brief	pd[K]/pd[log(sigma_f)]: (NxN) partial derivative of K with respect to log(sigma_f). */  
TEST_F(TestCaseCovSparseisoDerObs, dKdlogsigmafTest)
{
	// Expected value
	Matrix K1(17, 17);
	K1 <<  4.500000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  4.500000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  4.500000000000000f,  0.000000169247307f,  0.000000169247307f,  0.000000000000000f,  0.000000000000000f,  0.000072208139445f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000029831136745f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000015061318749f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000169247307f,  4.500000000000000f,  4.500000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000169247307f,  4.500000000000000f,  4.500000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  236.870505626144560f, -2.245316079825227f,  0.000000000000000f, -2.245316079825227f,  0.000000000000000f, -1.956261878176179f,  0.000000000000000f, -1.956261878176179f,  0.000000000000000f,  1.953444996276233f,  0.000000000000000f,  1.953444996276233f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -2.245316079825227f,  236.870505626144560f,  0.000000000000000f,  236.870505626144560f, -1.956261878176179f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  1.953444996276233f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000072208139445f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  236.870505626144560f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -2.245316079825227f,  236.870505626144560f,  0.000000000000000f,  236.870505626144560f, -1.956261878176179f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  1.953444996276233f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -1.956261878176179f,  0.000000000000000f, -1.956261878176179f,  236.870505626144560f, -1.379120165315468f,  0.000000000000000f, -1.379120165315468f,  0.000000000000000f,  1.568270884095413f,  0.000000000000000f,  1.568270884095413f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -1.956261878176179f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -1.379120165315468f,  236.870505626144560f,  0.000000000000000f,  236.870505626144560f,  1.568270884095413f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000029831136745f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  236.870505626144560f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -1.956261878176179f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -1.379120165315468f,  236.870505626144560f,  0.000000000000000f,  236.870505626144560f,  1.568270884095413f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  1.953444996276233f,  0.000000000000000f,  1.953444996276233f,  0.000000000000000f,  1.568270884095413f,  0.000000000000000f,  1.568270884095413f,  236.870505626144560f, -1.374600505604229f,  0.000000000000000f, -1.374600505604229f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  1.953444996276233f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  1.568270884095413f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -1.374600505604229f,  236.870505626144560f,  0.000000000000000f,  236.870505626144560f,
			 0.000000000000000f,  0.000000000000000f,  0.000015061318749f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  236.870505626144560f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  1.953444996276233f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  1.568270884095413f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, -1.374600505604229f,  236.870505626144560f,  0.000000000000000f,  236.870505626144560f;

	// Actual value
	MatrixPtr pK2 = CovSparseisoDerObs<TestType>::K(logHyp, derivativeTrainingData, 1);

	// Test
	TEST_MACRO::COMPARE(K1, *pK2, __FILE__, __LINE__);
}

/** @brief	Ks: (NxM) cross covariance matrix between the training data and test data. */  
TEST_F(TestCaseCovSparseisoDerObs, KsTest)
{
	// Expected value
	Matrix Ks1(17, 3);
	Ks1 << 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000258242034f,  0.000000084623653f,  0.000000000000000f,
			 0.000000000000000f,  2.250000000000000f,  0.000000000000000f,
			 0.000000000000000f,  2.250000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f, -0.027769422731059f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f, -0.022293935698356f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.022261833971768f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f,
			 0.000000000000000f,  0.000000000000000f,  0.000000000000000f;

	// Actual value
	MatrixPtr pKs2 = CovSparseisoDerObs<TestType>::Ks(logHyp, derivativeTrainingData, testData);

	// Test
	TEST_MACRO::COMPARE(Ks1, *pKs2, __FILE__, __LINE__);
}

/** @brief	Kss: (Nx1) self variance matrix between the test data. */  
TEST_F(TestCaseCovSparseisoDerObs, KssTest)
{
	// Expected value
	Matrix Kss1(3, 1);
	Kss1 <<   2.250000000000000f, 
		       2.250000000000000f, 
			    2.250000000000000f;

	// Actual value
	MatrixPtr pKss2 = CovSparseisoDerObs<TestType>::Kss(logHyp, testData);

	// Test
	TEST_MACRO::COMPARE(Kss1, *pKss2, __FILE__, __LINE__);
}
#endif
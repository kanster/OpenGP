#ifndef _TEST_CASE_INFERENCE_METHOD_EXACT_WITH_DERIVATIVE_OBSERVATIONS_HPP_
#define _TEST_CASE_INFERENCE_METHOD_EXACT_WITH_DERIVATIVE_OBSERVATIONS_HPP_

#include "TestDerivativeDataSetting.hpp"

/**
 * @class	TestCaseInfExactDerObs
 * @brief	Test fixture for testing CovSEiso class.
 * @note		Inherits from TestDataSetting
 * 			to use the initialized training data and test positions.
 * @author	Soohwan Kim
 * @date		03/07/2014
 */
class TestCaseInfExactDerObs : public TestDerivativeDataSetting, 
										 public InfExactDerObs<TestType, MeanZeroDerObs, CovSEisoDerObs, LikGaussDerObs> // for predicted member function test
{
// define matrix and vector types
protected:	TYPE_DEFINE_MATRIX(TestType);
				TYPE_DEFINE_VECTOR(TestType);

protected:
	typedef InfExactDerObs<TestType, MeanZeroDerObs, CovSEisoDerObs, LikGaussDerObs> InfExactDerObsType;

public:
	TestCaseInfExactDerObs()
		: sigma_nd(0.2f),					// Settint the hyperparameter, sigma_nd
		  EPS_SOLVER(static_cast<TestType>(1e-4f)),
		  EPS_SOLVER_SOLVER(static_cast<TestType>(1e-3f)) {}

protected:
	/** @brief	Overloading the test fixture set up. */
	virtual void SetUp()
	{
		// Call the parent set up.
		TestDerivativeDataSetting::SetUp();

		// Set the hyperparameters.
		logHyp.cov(0) = log(ell);
		logHyp.cov(1) = log(sigma_f);
		logHyp.lik(0) = log(sigma_n);
		logHyp.lik(1) = log(sigma_nd);

		// Some constants
		NN			= derivativeTrainingData.NN();
		pL			= choleskyFactor(logHyp, derivativeTrainingData);
		pY_M		= y_m(logHyp.mean, derivativeTrainingData);
		pAlpha	= alpha(pL, pY_M);
		pQ			= q(pL, pAlpha);
		dnlZWRTLikHyp01 = dnlZWRTLikHyp(logHyp.lik, derivativeTrainingData, pQ, 0);
		dnlZWRTLikHyp11 = dnlZWRTLikHyp(logHyp.lik, derivativeTrainingData, pQ, 1);
		dnlZWRTLikHyp02 = dnlZWRTLikHyp2(logHyp.lik, derivativeTrainingData, pQ, 0);
		dnlZWRTLikHyp12 = dnlZWRTLikHyp2(logHyp.lik, derivativeTrainingData, pQ, 1);
	}

protected:
	/** @brief Epsilon for the Eigen solver */
	const TestType EPS_SOLVER;
	const TestType EPS_SOLVER_SOLVER;

	/** @brief Noise variance hyperparameter: sigma_nd^2 */
	const TestType sigma_nd;

	/** @brief Log hyperparameters: log([ell, sigma_f]). */
	InfExactDerObsType::Hyp logHyp;

	/** @brief Some constants */
	int NN;
	CholeskyFactorConstPtr	pL;
	VectorConstPtr				pY_M;
	VectorConstPtr				pAlpha;
	MatrixConstPtr				pQ;
	TestType						dnlZWRTLikHyp01, dnlZWRTLikHyp02;
	TestType						dnlZWRTLikHyp11, dnlZWRTLikHyp12;
};


/** @brief	Cholesky factor test */  
TEST_F(TestCaseInfExactDerObs, CholeskyFactorTest)
{
	// Expected value
	Matrix L1(17, 17);
	L1 <<   1.503329637837291f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  0.795423300000398f,  1.275657388884836f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  0.687892515948215f,  0.272157565148449f,  1.308714692450155f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  0.403654917594202f,  0.582010543487548f,  0.731739901514811f,  1.105840472809004f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  0.403654917594202f,  0.582010543487548f,  0.731739901514811f,  1.096797577160052f,  0.141131945491735f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  -0.069544488642795f, -0.552610496013827f, -0.924210521730041f,  0.163620866895960f,  0.010483851973953f,  2.801559996873572f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  0.284987392327292f, -0.837769439741811f, -0.050106409482689f, -0.343330095018951f, -0.021998550445712f,  1.295080656531460f,  2.541420961290857f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  1.130253711712177f,  0.057493851976467f,  1.285779367260857f, -1.293631947502476f, -0.082888240990776f,  0.018033864229650f, -0.191843262592411f,  2.094876915028011f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  0.284987392327292f, -0.837769439741811f, -0.050106409482689f, -0.343330095018951f, -0.021998550445712f,  1.295080656531460f,  2.525681734846576f, -0.001441356544669f,  0.282400777694118f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  -0.936312550168757f, -0.304571574694565f, -0.297035864808642f,  0.262248699518774f,  0.016803336874291f, -0.196688281504345f, -0.516858456462958f,  0.111840489289137f, -0.028235581820360f,  2.755745532437449f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  -0.726696140986091f, -1.075106094270157f,  0.554870707371036f,  0.158500355530100f,  0.010155760061172f, -0.647267399086048f,  0.089365607898668f, -0.110455469992658f,  0.004416913560453f,  1.393772131006577f,  2.154342273115634f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  -0.619160263472293f, -0.810744683423433f,  1.275610568572186f, -0.191371285518494f, -0.012261933746608f, -0.267408585492200f, -0.312548658479973f, -0.571609264259855f, -0.020336937141609f, -0.100125829597692f, -0.307972537144813f,  2.394610815340082f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  -0.726696140986091f, -1.075106094270157f,  0.554870707371036f,  0.158500355530100f,  0.010155760061172f, -0.647267399086048f,  0.089365607898668f, -0.110455469992658f,  0.004416913560453f,  1.393772131006577f,  2.135775121322178f, -0.002387934109690f,  0.282222533907133f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  -0.449987597080821f,  0.182278536008051f, -1.279737959799665f,  0.384954185397337f,  0.024665574587289f, -0.419965141463487f,  1.002007064412712f,  0.505667186394226f,  0.058426407068771f, -0.169434803624899f,  0.824060472325146f,  0.536498177053058f,  0.058753558561970f,  2.139904301981279f,  0.000000000000000f,  0.000000000000000f,  0.000000000000000f, 
			  -0.777289139392772f, -0.389087088868565f, -1.388996040150571f,  0.254907374905009f,  0.016332948457439f,  0.020854459488197f, -0.044532883871509f,  0.290940695514387f, -0.000997036446498f, -0.018264386950020f, -0.082597635396621f,  0.053201023580996f, -0.004983876644566f,  1.208578256545132f,  2.175348289485878f,  0.000000000000000f,  0.000000000000000f, 
			  0.217547814274240f,  1.331777569042948f,  0.003298464037717f, -0.782514721457880f, -0.050138889145598f, -0.321753754451839f, -0.471676916095599f, -0.681577937149729f, -0.029767009425471f, -0.157542996542145f,  0.308008365050628f,  0.215181521989145f,  0.022084265481556f,  0.150209594963198f, -0.595375294699547f,  2.295481172204233f,  0.000000000000000f, 
			  -0.777289139392772f, -0.389087088868565f, -1.388996040150571f,  0.254907374905009f,  0.016332948457439f,  0.020854459488197f, -0.044532883871509f,  0.290940695514387f, -0.000997036446498f, -0.018264386950020f, -0.082597635396621f,  0.053201023580996f, -0.004983876644566f,  1.208578256545132f,  2.156960429393161f, -0.004769229978516f,  0.282204076948973f;

	// Actual value
	const Matrix L2(pL->matrixL());

	// Test
	TEST_MACRO::COMPARE(L1, L2, __FILE__, __LINE__);
}

/** @brief	y-m test */  
TEST_F(TestCaseInfExactDerObs, Y_MTest)
{
	// Expected value
	Vector Y_M(17);
	Y_M <<   0.346448761300360f, 
				0.886543861760306f, 
				0.454694864991908f, 
				0.413427289020815f, 
				0.217732068357300f, 
				0.125654587362626f, 
				0.308914593566815f, 
				0.726104431664832f, 
				0.782872072979123f, 
				0.693787614986897f, 
				0.009802252263062f, 
				0.843213338010510f, 
				0.922331997796276f, 
				0.770954220673925f, 
				0.042659855935049f, 
				0.378186137050219f, 
				0.704339624483368f;

	// Actual value
	// pY_M

	// Test
	TEST_MACRO::COMPARE(Y_M, *pY_M, __FILE__, __LINE__);
}

/** @brief	alpha test */  
TEST_F(TestCaseInfExactDerObs, AlphaTest)
{
	// Expected value
	Vector Alpha(17);
	Alpha << -0.100538760181774f, 
				 1.085149665604563f, 
				 -0.088588943315996f, 
				 9.743494719637452f, 
				 -9.826027346714236f, 
				 0.072032866905069f, 
				 -5.849867897681719f, 
				 0.078454255492977f, 
				 5.999069087626549f, 
				 0.077741278844838f, 
				 -11.305625701528131f, 
				 0.279574819047471f, 
				 11.507617936803200f, 
				 -0.024624428261838f, 
				 -8.193317487243663f, 
				 -0.051155922986322f, 
				 8.348676726464495f;

	// Actual value
	// pAlpha

	// Test
	TEST_MACRO::COMPARE(Alpha, *pAlpha, __FILE__, __LINE__, EPS_SOLVER); // maxAbsDiff = 3.576e-4
}

/** @brief	Prediction test */  
TEST_F(TestCaseInfExactDerObs, PredictionTest)
{
	// Expected value
	Vector Fmu(3);
	Fmu <<   0.368200127865168f, 
				0.315992341824440f, 
				0.597893658227936f;

	Matrix Fs2(3, 1);
	Fs2 <<   0.589708818138210f, 
				0.004957450319059f, 
				0.715176721495841f;

	// Actual value
	predict(logHyp, derivativeTrainingData, testData, true, 0);

	// Test
	TEST_MACRO::COMPARE(Fmu, *(testData.pMu()), __FILE__, __LINE__);
	TEST_MACRO::COMPARE(Fs2, *(testData.pSigma()), __FILE__, __LINE__);

	// Actual value
	predict(logHyp, derivativeTrainingData, testData, true, 2);

	// Test
	TEST_MACRO::COMPARE(Fmu, *(testData.pMu()), __FILE__, __LINE__);
	TEST_MACRO::COMPARE(Fs2, *(testData.pSigma()), __FILE__, __LINE__);
}

/** @brief	Negative log marginalLikelihood test */  
TEST_F(TestCaseInfExactDerObs, NlZTest)
{
	// Expected value
	const TestType factor11 = 11.008132553868180f;
	const TestType factor21 = 2.993804105817858f;
	const TestType factor31 = 15.621955064479435f;

	const TestType nlZ1		= 29.623891724165475f;

	// Actual value
	const TestType factor12 = static_cast<TestType>(0.5f) * (*pY_M).dot(*pAlpha);
	const TestType factor22 = pL->matrixL().nestedExpression().diagonal().array().log().sum();
	const TestType factor32 = static_cast<TestType>(NN) * 0.918938533204673f;

	TestType nlZ2;
	negativeLogMarginalLikelihood(logHyp, derivativeTrainingData, nlZ2, VectorPtr(), 1);

	// Test
	TEST_MACRO::COMPARE(factor11, factor12, __FILE__, __LINE__, EPS_SOLVER_SOLVER);	// maxAbsDiff = 1.173e-4
	TEST_MACRO::COMPARE(factor21, factor22, __FILE__, __LINE__);
	TEST_MACRO::COMPARE(factor31, factor32, __FILE__, __LINE__);
	TEST_MACRO::COMPARE(nlZ1, nlZ2, __FILE__, __LINE__, EPS_SOLVER_SOLVER);				// maxAbsDiff = 1.144e-4
}

/** @brief	Derivatives of negative log marginalLikelihood test test */  
TEST_F(TestCaseInfExactDerObs, QTest)
{
	// Expected value
	Matrix Q1(17, 17);
	Q1 <<   0.798076921113998f, -0.294419735059127f, -0.304343154000848f,  1.053077525279280f, -0.914417960621579f, -0.030154182401803f, -0.598110043846489f, -0.015164421822534f,  0.593167390128366f,  0.066518217713971f, -1.150013619714356f,  0.072815990246522f,  1.143601611408209f,  0.005992702572715f, -0.822185087450261f,  0.057837553721492f,  0.840926501730030f, 
			 -0.294419735059127f,  0.428727607506208f, -0.329277915391820f, -10.738444059120106f,  10.497416267222542f, -0.046012679521746f,  6.393063347958869f, -0.080068083998723f, -6.464806659417931f, -0.215896517038992f,  12.432052808957710f, -0.074901989719007f, -12.323730896532950f, -0.175559598991855f,  8.929502509389554f, -0.169611041645677f, -9.021036980048464f, 
			 -0.304343154000847f, -0.329277915391820f,  3.532885457303277f, -0.047249374847049f, -1.780892655904236f,  0.250080306563470f, -0.704563501462196f, -0.697670366738669f,  0.345121305484086f,  0.244636393191057f, -1.173292515658373f, -0.358934470128852f,  0.847708631871768f,  0.561872501983682f, -0.743212638021564f, -0.171618310784074f,  0.722225149710160f, 
			 1.053077525279278f, -10.738444059120100f, -0.047249374847044f, -44.510192542188932f,  46.165342377136405f, -0.762127539308644f,  57.058600415261800f, -0.541312335242575f, -58.391454534406222f, -0.795444007386203f,  110.179322408434890f, -2.658922480110500f, -112.101396519449120f,  0.103813988368321f,  79.853934357246615f,  0.612149033371860f, -81.322898916292104f, 
			 -0.914417960621579f,  10.497416267222544f, -1.780892655904237f,  46.165342377136405f, -46.125316608962031f,  0.647521239092665f, -57.420518493662961f,  0.993999948826443f,  59.007460353469817f,  0.725915664434261f, -111.066369231532650f,  2.812223110435258f,  113.097186625965580f, -0.378074303873011f, -80.485373005993395f, -0.388947930333549f,  82.056714507091613f, 
			 -0.030154182401803f, -0.046012679521746f,  0.250080306563470f, -0.762127539308644f,  0.647521239092665f,  0.187051233488246f,  0.367006494131218f, -0.030623172507096f, -0.486506406698035f, -0.020341084549632f,  0.829140417002190f, -0.022541050110708f, -0.814162925670634f,  0.070848933847747f,  0.574219932206075f, -0.011579475591303f, -0.617347335334378f, 
			 -0.598110043846489f,  6.393063347958869f, -0.704563501462197f,  57.058600415261800f, -57.420518493662961f,  0.367006494131218f, -21.663707647815421f,  0.493825785778245f,  22.651008444191802f,  0.462235532833945f, -66.131812936767673f,  1.657346281718376f,  67.322648665098484f, -0.205208754377148f, -47.914300140549841f, -0.269338816863744f,  48.854180773858253f, 
			 -0.015164421822534f, -0.080068083998723f, -0.697670366738669f, -0.541312335242575f,  0.993999948826443f, -0.030623172507096f,  0.493825785778245f,  0.282717904271455f, -0.435773743787319f, -0.040518695294676f,  0.914313257468083f,  0.042206307267199f, -0.875482787557104f, -0.091714118617538f,  0.656407690609031f,  0.065282961409519f, -0.641382149796582f, 
			 0.593167390128366f, -6.464806659417932f,  0.345121305484085f, -58.391454534406222f,  59.007460353469817f, -0.486506406698037f,  22.651008444191802f, -0.435773743787319f, -23.431583145604726f, -0.458915981355826f,  67.827833580120725f, -1.655318131854065f, -69.030391119085778f,  0.086564544396612f,  49.167802466424597f,  0.336804491026464f, -50.068763668729254f, 
			 0.066518217713971f, -0.215896517038992f,  0.244636393191057f, -0.795444007386203f,  0.725915664434261f, -0.020341084549632f,  0.462235532833945f, -0.040518695294676f, -0.458915981355826f,  0.202876291137512f,  0.806761750260514f, -0.045164574040049f, -0.966768984782237f,  0.075851542388750f,  0.621697650029575f,  0.017313006597778f, -0.664298134788013f, 
			 -1.150013619714357f,  12.432052808957712f, -1.173292515658374f,  110.179322408434890f, -111.066369231532650f,  0.829140417002189f, -66.131812936767673f,  0.914313257468084f,  67.827833580120725f,  0.806761750260514f, -115.248696432936580f,  3.186709637035552f,  117.669297179804160f, -0.338933459234315f, -92.616921468257118f, -0.583374232877683f,  94.400673468771444f, 
			 0.072815990246522f, -0.074901989719007f, -0.358934470128852f, -2.658922480110500f,  2.812223110435258f, -0.022541050110708f,  1.657346281718376f,  0.042206307267199f, -1.655318131854065f, -0.045164574040049f,  3.186709637035552f,  0.109934081268969f, -3.191298825036790f, -0.052660387332931f,  2.300542016563674f,  0.005666678485169f, -2.324183022418092f, 
			 1.143601611408209f, -12.323730896532949f,  0.847708631871767f, -112.101396519449120f,  113.097186625965580f, -0.814162925670634f,  67.322648665098484f, -0.875482787557104f, -69.030391119085778f, -0.966768984782238f,  117.669297179804160f, -3.191298825036790f, -119.856794509317880f,  0.222829622157603f,  94.299226574433220f,  0.583658301752988f, -96.059722749729531f, 
			 0.005992702572715f, -0.175559598991855f,  0.561872501983682f,  0.103813988368321f, -0.378074303873011f,  0.070848933847747f, -0.205208754377148f, -0.091714118617538f,  0.086564544396612f,  0.075851542388750f, -0.338933459234315f, -0.052660387332931f,  0.222829622157603f,  0.295112569248486f, -0.267565125984299f, -0.044053597639377f,  0.139772023838896f, 
			 -0.822185087450260f,  8.929502509389554f, -0.743212638021564f,  79.853934357246615f, -80.485373005993395f,  0.574219932206076f, -47.914300140549841f,  0.656407690609031f,  49.167802466424597f,  0.621697650029575f, -92.616921468257118f,  2.300542016563674f,  94.299226574433206f, -0.267565125984297f, -54.573811748529607f, -0.393048287246859f,  55.959998716528638f, 
			 0.057837553721492f, -0.169611041645677f, -0.171618310784074f,  0.612149033371860f, -0.388947930333549f, -0.011579475591303f, -0.269338816863744f,  0.065282961409519f,  0.336804491026464f,  0.017313006597778f, -0.583374232877683f,  0.005666678485169f,  0.583658301752988f, -0.044053597639377f, -0.393048287246859f,  0.187218186748646f,  0.453172694789775f, 
			 0.840926501730031f, -9.021036980048466f,  0.722225149710163f, -81.322898916292104f,  82.056714507091613f, -0.617347335334378f,  48.854180773858253f, -0.641382149796583f, -50.068763668729254f, -0.664298134788013f,  94.400673468771444f, -2.324183022418092f, -96.059722749729531f,  0.139772023838896f,  55.959998716528638f,  0.453172694789775f, -57.143763384766714f;

	// Actual value
	VectorPtr pAlpha0(new Vector(17));
	(*pAlpha0) << -0.100538760181774f, 
					   1.085149665604563f, 
						-0.088588943315996f, 
						9.743494719637452f, 
						-9.826027346714236f, 
						0.072032866905069f, 
						-5.849867897681719f, 
						0.078454255492977f, 
						5.999069087626549f, 
						0.077741278844838f, 
						-11.305625701528131f, 
						0.279574819047471f, 
						11.507617936803200f, 
						-0.024624428261838f, 
						-8.193317487243663f, 
						-0.051155922986322f, 
						8.348676726464495f;

	MatrixPtr pQ2 = q(pL, pAlpha0);

	// Test
	TEST_MACRO::COMPARE(Q1, *pQ, __FILE__, __LINE__, EPS_SOLVER_SOLVER); // maxAbsDiff = 7.835e-3
	TEST_MACRO::COMPARE(Q1, *pQ2, __FILE__, __LINE__);
	TEST_MACRO::COMPARE(*pQ, *pQ2, __FILE__, __LINE__, EPS_SOLVER_SOLVER); // maxAbsDiff = 8.224e-3
}

/** @brief	Derivatives of negative log marginalLikelihood test test */  
TEST_F(TestCaseInfExactDerObs, dnlZWRTLikHypTest)
{
	// Expected value
	TestType dnlZWRTLikHyp0 = static_cast<TestType>(-0.858758191652275f);
	TestType dnlZWRTLikHyp1 = static_cast<TestType>(-15.626137864112307f);

	// Actual value
	MatrixPtr pQ0(new Matrix(17, 17));
	(*pQ0) <<   0.798076921113998f, -0.294419735059127f, -0.304343154000848f,  1.053077525279280f, -0.914417960621579f, -0.030154182401803f, -0.598110043846489f, -0.015164421822534f,  0.593167390128366f,  0.066518217713971f, -1.150013619714356f,  0.072815990246522f,  1.143601611408209f,  0.005992702572715f, -0.822185087450261f,  0.057837553721492f,  0.840926501730030f, 
			 -0.294419735059127f,  0.428727607506208f, -0.329277915391820f, -10.738444059120106f,  10.497416267222542f, -0.046012679521746f,  6.393063347958869f, -0.080068083998723f, -6.464806659417931f, -0.215896517038992f,  12.432052808957710f, -0.074901989719007f, -12.323730896532950f, -0.175559598991855f,  8.929502509389554f, -0.169611041645677f, -9.021036980048464f, 
			 -0.304343154000847f, -0.329277915391820f,  3.532885457303277f, -0.047249374847049f, -1.780892655904236f,  0.250080306563470f, -0.704563501462196f, -0.697670366738669f,  0.345121305484086f,  0.244636393191057f, -1.173292515658373f, -0.358934470128852f,  0.847708631871768f,  0.561872501983682f, -0.743212638021564f, -0.171618310784074f,  0.722225149710160f, 
			 1.053077525279278f, -10.738444059120100f, -0.047249374847044f, -44.510192542188932f,  46.165342377136405f, -0.762127539308644f,  57.058600415261800f, -0.541312335242575f, -58.391454534406222f, -0.795444007386203f,  110.179322408434890f, -2.658922480110500f, -112.101396519449120f,  0.103813988368321f,  79.853934357246615f,  0.612149033371860f, -81.322898916292104f, 
			 -0.914417960621579f,  10.497416267222544f, -1.780892655904237f,  46.165342377136405f, -46.125316608962031f,  0.647521239092665f, -57.420518493662961f,  0.993999948826443f,  59.007460353469817f,  0.725915664434261f, -111.066369231532650f,  2.812223110435258f,  113.097186625965580f, -0.378074303873011f, -80.485373005993395f, -0.388947930333549f,  82.056714507091613f, 
			 -0.030154182401803f, -0.046012679521746f,  0.250080306563470f, -0.762127539308644f,  0.647521239092665f,  0.187051233488246f,  0.367006494131218f, -0.030623172507096f, -0.486506406698035f, -0.020341084549632f,  0.829140417002190f, -0.022541050110708f, -0.814162925670634f,  0.070848933847747f,  0.574219932206075f, -0.011579475591303f, -0.617347335334378f, 
			 -0.598110043846489f,  6.393063347958869f, -0.704563501462197f,  57.058600415261800f, -57.420518493662961f,  0.367006494131218f, -21.663707647815421f,  0.493825785778245f,  22.651008444191802f,  0.462235532833945f, -66.131812936767673f,  1.657346281718376f,  67.322648665098484f, -0.205208754377148f, -47.914300140549841f, -0.269338816863744f,  48.854180773858253f, 
			 -0.015164421822534f, -0.080068083998723f, -0.697670366738669f, -0.541312335242575f,  0.993999948826443f, -0.030623172507096f,  0.493825785778245f,  0.282717904271455f, -0.435773743787319f, -0.040518695294676f,  0.914313257468083f,  0.042206307267199f, -0.875482787557104f, -0.091714118617538f,  0.656407690609031f,  0.065282961409519f, -0.641382149796582f, 
			 0.593167390128366f, -6.464806659417932f,  0.345121305484085f, -58.391454534406222f,  59.007460353469817f, -0.486506406698037f,  22.651008444191802f, -0.435773743787319f, -23.431583145604726f, -0.458915981355826f,  67.827833580120725f, -1.655318131854065f, -69.030391119085778f,  0.086564544396612f,  49.167802466424597f,  0.336804491026464f, -50.068763668729254f, 
			 0.066518217713971f, -0.215896517038992f,  0.244636393191057f, -0.795444007386203f,  0.725915664434261f, -0.020341084549632f,  0.462235532833945f, -0.040518695294676f, -0.458915981355826f,  0.202876291137512f,  0.806761750260514f, -0.045164574040049f, -0.966768984782237f,  0.075851542388750f,  0.621697650029575f,  0.017313006597778f, -0.664298134788013f, 
			 -1.150013619714357f,  12.432052808957712f, -1.173292515658374f,  110.179322408434890f, -111.066369231532650f,  0.829140417002189f, -66.131812936767673f,  0.914313257468084f,  67.827833580120725f,  0.806761750260514f, -115.248696432936580f,  3.186709637035552f,  117.669297179804160f, -0.338933459234315f, -92.616921468257118f, -0.583374232877683f,  94.400673468771444f, 
			 0.072815990246522f, -0.074901989719007f, -0.358934470128852f, -2.658922480110500f,  2.812223110435258f, -0.022541050110708f,  1.657346281718376f,  0.042206307267199f, -1.655318131854065f, -0.045164574040049f,  3.186709637035552f,  0.109934081268969f, -3.191298825036790f, -0.052660387332931f,  2.300542016563674f,  0.005666678485169f, -2.324183022418092f, 
			 1.143601611408209f, -12.323730896532949f,  0.847708631871767f, -112.101396519449120f,  113.097186625965580f, -0.814162925670634f,  67.322648665098484f, -0.875482787557104f, -69.030391119085778f, -0.966768984782238f,  117.669297179804160f, -3.191298825036790f, -119.856794509317880f,  0.222829622157603f,  94.299226574433220f,  0.583658301752988f, -96.059722749729531f, 
			 0.005992702572715f, -0.175559598991855f,  0.561872501983682f,  0.103813988368321f, -0.378074303873011f,  0.070848933847747f, -0.205208754377148f, -0.091714118617538f,  0.086564544396612f,  0.075851542388750f, -0.338933459234315f, -0.052660387332931f,  0.222829622157603f,  0.295112569248486f, -0.267565125984299f, -0.044053597639377f,  0.139772023838896f, 
			 -0.822185087450260f,  8.929502509389554f, -0.743212638021564f,  79.853934357246615f, -80.485373005993395f,  0.574219932206076f, -47.914300140549841f,  0.656407690609031f,  49.167802466424597f,  0.621697650029575f, -92.616921468257118f,  2.300542016563674f,  94.299226574433206f, -0.267565125984297f, -54.573811748529607f, -0.393048287246859f,  55.959998716528638f, 
			 0.057837553721492f, -0.169611041645677f, -0.171618310784074f,  0.612149033371860f, -0.388947930333549f, -0.011579475591303f, -0.269338816863744f,  0.065282961409519f,  0.336804491026464f,  0.017313006597778f, -0.583374232877683f,  0.005666678485169f,  0.583658301752988f, -0.044053597639377f, -0.393048287246859f,  0.187218186748646f,  0.453172694789775f, 
			 0.840926501730031f, -9.021036980048466f,  0.722225149710163f, -81.322898916292104f,  82.056714507091613f, -0.617347335334378f,  48.854180773858253f, -0.641382149796583f, -50.068763668729254f, -0.664298134788013f,  94.400673468771444f, -2.324183022418092f, -96.059722749729531f,  0.139772023838896f,  55.959998716528638f,  0.453172694789775f, -57.143763384766714f;
	TestType dnlZWRTLikHyp03 = dnlZWRTLikHyp2(logHyp.lik, derivativeTrainingData, pQ0, 0);
	TestType dnlZWRTLikHyp13 = dnlZWRTLikHyp2(logHyp.lik, derivativeTrainingData, pQ0, 1);

	// Test
	TEST_MACRO::COMPARE(dnlZWRTLikHyp0, dnlZWRTLikHyp01, __FILE__, __LINE__, EPS_SOLVER);			// maxAbsDiff: 6.520e-5
	TEST_MACRO::COMPARE(dnlZWRTLikHyp1, dnlZWRTLikHyp11, __FILE__, __LINE__, EPS_SOLVER_SOLVER);	// maxAbsDiff: 5.292e-4
	TEST_MACRO::COMPARE(dnlZWRTLikHyp0, dnlZWRTLikHyp02, __FILE__, __LINE__, EPS_SOLVER);			// maxAbsDiff: 6.532e-5
	TEST_MACRO::COMPARE(dnlZWRTLikHyp1, dnlZWRTLikHyp12, __FILE__, __LINE__, EPS_SOLVER_SOLVER);	// maxAbsDiff: 5.283e-4
	TEST_MACRO::COMPARE(dnlZWRTLikHyp0, dnlZWRTLikHyp03, __FILE__, __LINE__);
	TEST_MACRO::COMPARE(dnlZWRTLikHyp1, dnlZWRTLikHyp13, __FILE__, __LINE__);
}

/** @brief	Derivatives of negative log marginalLikelihood test test */  
TEST_F(TestCaseInfExactDerObs, DnlZTest)
{
	// Expected value
	Vector DnlZ1(4);
	DnlZ1 << -14.318745900083936f,
				 11.468630948027677f,
				 -0.858758191652275f,
				 -15.626137864112307f;

	// Actual value
	TestType nlZ;
	VectorPtr pDnlZ2(new Vector(4));
	negativeLogMarginalLikelihood(logHyp, derivativeTrainingData, nlZ, pDnlZ2, -1);

	// Test
	TEST_MACRO::COMPARE(DnlZ1, *pDnlZ2, __FILE__, __LINE__, EPS_SOLVER); // maxAbsDiff: 5.283e-4
}

#endif